Threading
	GameThread:
	- Will run as long as the render queue is not full
	- 2 Phases:
		1. Update the game
		2. Submiting objects to the render module
	RenderThread:
	- Will run as long as there are frames in the render queue
	- Multiple passes:
		1. Takes all objects submitted from the game thread and sends
		2. Post Processing
		3. This completely depends on the renderer and may even be a scriptable pipeline?

Modules:
	- Modules could choose what thread they run on
	- Some modules may not require an update per frame
	- Modules know nothing about other modules
	- They may use other abstract modules from the core engine for external functionality, but never knows the full implementation of the module

ScenesModule:
	- Runs on the GameThread
	- Contains all the objects within a loaded scene
	- In charge of handling serialization and deserialization of scenes
	- Runs on the game thread in 2 phases:
		1. Update the loaded scene(s) and all its objects
		2. Send all objects to the RenderModule
	- When both phases are done it notifies the RenderModule that the frame is finished
	- Does not know anything about the rendering implementation!

RenderModule:
	- Runs on the RenderThread
	- Keeps track of a RenderFrame
	- RenderFrame stores Objects that need to be rendered and their render settings
	- Does not know anything about the graphics API or platform!
	- Once a frame is ready it sends commands to the GraphicsModule 

GraphicsModule:
	- Has a built in resource manager to manage resources that exist in GPU memory
	- Needs to be able to take resources from the core engine and convert them to GPU resources
	- Has no update loop
	- Takes in commands and sends them to the GPU based on the platform implementation
	- Does not do ANYTHING by itself!!! (hence why is has no update loop)